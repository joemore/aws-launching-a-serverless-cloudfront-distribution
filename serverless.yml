# Note 1 - To add a custom domain Alias, please make sure you have a valid
# certificate for the domain in AWS Certificate Manager (ACM) preferably in us-east-1 region

# Note 2 - Once your Distribution has deployed, go ro Route 53 and add a CNAME for subdomain.domain.com and point it to the
# cloudfront domain name e.g. "xxxxxxxx.cloudfront.net"

# Note 3 - if you would like to use CloudFlare to point to your CF Distribution... (to be added) 

# Edit the values in .env.example and rename to .env to begin 

service: ${env:SERVICE_NAME}
useDotenv: true

provider:
  name: aws
  profile: ${env:IAM_PROFILE}
  region: ${env:MY_REGION}
  runtime: nodejs18.x
  
resources:
  Resources:
    # The S3 Bucket
    MyS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:MY_BUCKET}
        AccessControl: Private # Set the bucket access control to private

        # https://docs.aws.amazon.com/AmazonS3/latest/userguide/ManageCorsUsing.html
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - ${env:ALLOWED_ORIGINS}
              AllowedMethods:
                - HEAD
                - GET
              AllowedHeaders:
                - "*"

    # The S3 Bucket Policy
    PrivateBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: AllowCloudFrontServicePrincipalReadOnly
              Effect: Allow
              Principal: { "Service": "cloudfront.amazonaws.com" }
              Action:
                - s3:GetObject
              Resource: !Sub arn:aws:s3:::${MyS3Bucket}/*
              Condition:
                StringEquals:
                  "aws:SourceArn": !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${MyCloudFrontDistribution}
        Bucket:
          Ref: MyS3Bucket
    OriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Name: ${env:MY_BUCKET_ORIGIN_ID}
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4

    # The Cloud Front Distribution
    MyCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          IPV6Enabled: true
          Comment: ${env:MY_DISTRO_COMMENT} # Add a description to the CloudFront distribution
          PriceClass: ${env:MY_DISTRO_PRICE_CLASS} # Set the price class to "Use Only North America and Europe"

          #optional 1 - Custom Domain alias - Comment out the 5 lines below if you don not want to use the domain alias and instead just use xxxxxxxx.cloudfront.net
          Aliases:
            - ${env:MY_DOMAIN_ALIAS} # Replace with your desired CloudFront distribution alias (Make sure you have a cert in "AWS Certificate Manager (ACM)" in the us-east-1 region)
          ViewerCertificate:
            AcmCertificateArn: ${env:MY_ACM_CERTIFICATE_ARN} # Replace with your ACM certificate ARN
            SslSupportMethod: sni-only

          Origins:
            - DomainName: ${env:MY_BUCKET}.s3.${env:MY_REGION}.amazonaws.com
              Id: ${env:MY_BUCKET_ORIGIN_ID}
              S3OriginConfig: {}
              OriginAccessControlId: !GetAtt OriginAccessControl.Id
          DefaultCacheBehavior:
            AllowedMethods: [GET, HEAD, OPTIONS]
            TargetOriginId: ${env:MY_BUCKET_ORIGIN_ID}
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # No caching
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
            ViewerProtocolPolicy: redirect-to-https
          # Default Response example
          DefaultRootObject: index.json
          ## Any 404's will go directly to /404.json (just an example)
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /404.json

          HttpVersion: http2

  # optional 2 - Route53 Auto Assign subdomain - Comment out the below if you do not want Route53 to update DNS and add a record for your new subdomain        
    Route53RecordIPv4:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: ${env:MY_ROOT_DOMAIN}.
        Name: ${env:MY_DOMAIN_ALIAS}.
        Type: A
        AliasTarget:
          DNSName: !GetAtt MyCloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2
    Route53RecordIPv6:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: ${env:MY_ROOT_DOMAIN}.
        Name: ${env:MY_DOMAIN_ALIAS}.
        Type: AAAA
        AliasTarget:
          DNSName: !GetAtt MyCloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2
